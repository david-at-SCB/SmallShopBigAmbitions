using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System.Collections.Immutable;
using System.Text;

namespace SmallShopBigAmbitions.Generators;

[Generator]
public sealed class RequestRegistrationGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var candidates = context.SyntaxProvider
            .CreateSyntaxProvider(
                predicate: static (n, _) => n is RecordDeclarationSyntax or ClassDeclarationSyntax,
                transform: static (ctx, _) => (INamedTypeSymbol?)ctx.SemanticModel.GetDeclaredSymbol(ctx.Node))
            .Where(static s => s is not null)!;

        var all = candidates.Collect();

        context.RegisterSourceOutput(all, static (spc, symbols) =>
        {
            if (symbols.IsDefaultOrEmpty) return;

            var handlers = new List<INamedTypeSymbol>();
            var behaviours = new List<INamedTypeSymbol>();

            foreach (var sym in symbols.Distinct(SymbolEqualityComparer.Default))
            {
                foreach (var iface in sym.Interfaces)
                {
                    var display = iface.OriginalDefinition.ToDisplayString();
                    if (display == "SmallShopBigAmbitions.FunctionalDispatcher.IFunctionalHandler<TRequest, TResponse>")
                        handlers.Add(sym);
                    else if (display == "SmallShopBigAmbitions.FunctionalDispatcher.IFunctionalPipelineBehavior<TRequest, TResponse>")
                        behaviours.Add(sym);
                }
            }

            if (handlers.Count == 0 && behaviours.Count == 0) return;

            var sb = new StringBuilder();
            sb.AppendLine("// <auto-generated/>");
            sb.AppendLine("using Microsoft.Extensions.DependencyInjection;");
            sb.AppendLine("using SmallShopBigAmbitions.FunctionalDispatcher;");
            sb.AppendLine("namespace SmallShopBigAmbitions.Generated;");
            sb.AppendLine("public static class FunctionalRequestRegistration");
            sb.AppendLine("{");
            sb.AppendLine("  public static IServiceCollection AddFunctionalRequests(this IServiceCollection services)");
            sb.AppendLine("  {");

            foreach (var h in handlers)
            {
                var iface = h.Interfaces.First(i => i.OriginalDefinition.ToDisplayString() ==
                    "SmallShopBigAmbitions.FunctionalDispatcher.IFunctionalHandler<TRequest, TResponse>");
                var tReq = iface.TypeArguments[0].ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat);
                var tRes = iface.TypeArguments[1].ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat);
                sb.AppendLine($"    services.AddScoped<IFunctionalHandler<{tReq}, {tRes}>, {h.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)}>();");
            }

            foreach (var b in behaviours)
            {
                var iface = b.Interfaces.First(i => i.OriginalDefinition.ToDisplayString() ==
                    "SmallShopBigAmbitions.FunctionalDispatcher.IFunctionalPipelineBehavior<TRequest, TResponse>");
                var tReq = iface.TypeArguments[0].ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat);
                var tRes = iface.TypeArguments[1].ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat);
                sb.AppendLine($"    services.AddScoped<IFunctionalPipelineBehavior<{tReq}, {tRes}>, {b.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)}>();");
            }

            sb.AppendLine("    return services;");
            sb.AppendLine("  }");
            sb.AppendLine("}");
            spc.AddSource("FunctionalRequestRegistration.g.cs", sb.ToString());
        });
    }
}
